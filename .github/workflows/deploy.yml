name: Deploy to Docker

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Set environment variables based on branch
      id: vars
      run: |
        if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
          echo "BRANCH=main" >> $GITHUB_ENV
          echo "REMOTE_DIR=prod" >> $GITHUB_ENV
        elif [[ "${GITHUB_REF}" == "refs/heads/dev" ]]; then
          echo "BRANCH=dev" >> $GITHUB_ENV
          echo "REMOTE_DIR=dev" >> $GITHUB_ENV
        fi
    - name: Debug environment variables
      run: |
        echo "SERVER_HOST: ${{ secrets.SERVER_HOST }}"
        echo "SERVER_USER: ${{ secrets.SERVER_USER }}"
    - name: Ensure Docker and Directory on Server
      env:
        SERVER_USER: ${{ secrets.SERVER_USER }}
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        REPO_URL: ${{ secrets.REPO_URL }}
      run: |
        ssh -o StrictHostKeyChecking=no "$SERVER_USER@$SERVER_HOST" '
          apt-get update && 
          apt-get install -y docker.io docker-compose &&
          systemctl start docker &&
          systemctl enable docker &&
          mkdir -p /root/node_app && 
          cd /root/node_app && 
          git init && 
          git remote add origin $REPO_URL || git remote set-url origin $REPO_URL
        "

    - name: Deploy to Server
      if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
      env:
        SERVER_USER: ${{ secrets.SERVER_USER }}
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      run: |
        ssh $SERVER_USER@$SERVER_HOST"
          cd /root/node_app &&
          git fetch origin dev &&
          git reset --hard origin/dev &&
          echo 'Contents of /root/node_app:' &&
          ls -la &&
          if [ -f docker-compose.yaml ] && [ -f docker-compose.override.yaml ] && [ -f .env ]; then
            echo 'Docker Compose and .env files found. Proceeding with deployment.' &&
            echo 'Contents of .env file:' &&
            set -o allexport && source .env && set +o allexport &&
            echo 'Environment variables loaded:' &&
            env | grep -E '^(PORT|NODE_ENV|MONGO_URL|REDIS_HOST|DOCKER_HUB_USERNAME|DOCKER_TAG|CONTAINER_NAME)' &&
            docker-compose version &&
            docker-compose -f docker-compose.yaml -f docker-compose.override.yaml config &&
            docker-compose -f docker-compose.yaml -f docker-compose.override.yaml down --remove-orphans &&
            docker network create nodeapp_default || true &&
            docker-compose -f docker-compose.yaml -f docker-compose.override.yaml up -d --build
          else
            echo 'Error: docker-compose files or .env file not found. Listing all yaml files:' &&
            ls -la *.yaml *.yml .env &&
            exit 1
          fi
        "
            
    - name: Verify Deployment
      if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
      env:
        SERVER_USER: ${{ secrets.SERVER_USER }}
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
      run: |
        echo "Verifying deployment"
        ssh $SERVER_USER@$SERVER_HOST"
          cd /root/node_app &&
          docker ps &&
          if [ -f docker-compose.yaml ] && [ -f docker-compose.override.yaml ]; then
            docker-compose -f docker-compose.yaml -f docker-compose.override.yaml logs --tail=50
          else
            echo 'Warning: docker-compose files not found. Skipping logs.'
          fi
        "
