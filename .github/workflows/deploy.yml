name: Deploy to Linode

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Linode CLI
        run: pip install linode-cli
      
      - name: Verify Linode CLI Installation
        run: linode-cli --version
      
      - name: Configure and Test Linode CLI
        env:
          LINODE_CLI_TOKEN: ${{ secrets.LINODE_CLI_TOKEN }}
        run: |
          export LINODE_CLI_TOKEN
          linode-cli --no-defaults linodes list
          
      - name: Set up SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.LINODE_SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.LINODE_INSTANCE_IP }} >> ~/.ssh/known_hosts

      - name: Set Environment Variables
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "APP_ENV=prd" >> $GITHUB_ENV
            echo "APP_SERVICE=prod_app" >> $GITHUB_ENV
          else
            echo "APP_ENV=dev" >> $GITHUB_ENV
            echo "APP_SERVICE=dev_app" >> $GITHUB_ENV
          fi

      - name: Prepare Linode Instance
        env:
          LINODE_INSTANCE_IP: ${{ secrets.LINODE_INSTANCE_IP }}
          REPO_URL: ${{ github.server_url }}/${{ github.repository }}.git
        run: |
          ssh root@$LINODE_INSTANCE_IP "
            mkdir -p /root/node_app
            cd /root/node_app
            if [ ! -d .git ]; then
              git init
              git remote add origin $REPO_URL
            else
              git remote set-url origin $REPO_URL
            fi
          "

      - name: Deploy to Linode
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
        env:
          LINODE_INSTANCE_IP: ${{ secrets.LINODE_INSTANCE_IP }}
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        run: |
          ssh root@$LINODE_INSTANCE_IP "
            cd /root/node_app &&
            git fetch origin ${{ github.ref }} &&
            git reset --hard FETCH_HEAD &&
            echo 'Contents of /root/node_app:' &&
            ls -la &&
            if [ -f docker-compose.yaml ] && [ -f .env.${{ env.APP_ENV }} ]; then
              echo 'Docker Compose and .env.${{ env.APP_ENV }} files found. Proceeding with deployment.' &&
              cp .env.${{ env.APP_ENV }} .env &&
              echo 'Contents of .env file:' &&
              cat .env &&
              echo 'APP_ENV=${{ env.APP_ENV }}' >> .env &&
              echo 'Environment variables loaded:' &&
              env | grep -E '^(PORT|NODE_ENV|MONGO_URL|REDIS_URL|DOCKER_HUB_USERNAME|APP_ENV)' &&
              docker-compose version &&
              docker-compose config &&
              docker-compose down --remove-orphans &&
              docker network create app-network || true &&
              docker-compose up -d --build ${{ env.APP_SERVICE }} mongo redis nginx
            else
              echo 'Error: docker-compose.yaml or .env.${{ env.APP_ENV }} file not found. Listing all files:' &&
              ls -la &&
              exit 1
            fi
          "
            
      - name: Verify Deployment
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
        env:
          LINODE_INSTANCE_IP: ${{ secrets.LINODE_INSTANCE_IP }}
        run: |
          echo "Verifying deployment"
          ssh root@$LINODE_INSTANCE_IP "
            cd /root/node_app &&
            docker ps &&
            docker-compose logs --tail=50 ${{ env.APP_SERVICE }} nginx
          "