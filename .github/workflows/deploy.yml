name: Deploy to Linode and Docker Hub

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set Environment Variables
        run: |
          echo "APP_DIR=/root/node_app" >> $GITHUB_ENV
          echo "COMPOSE_FILE=docker-compose.yaml" >> $GITHUB_ENV
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "APP_ENV=prod" >> $GITHUB_ENV
            echo "APP_SERVICE=prod_app" >> $GITHUB_ENV
            echo "DOCKER_TAG=prod" >> $GITHUB_ENV
          else
            echo "APP_ENV=dev" >> $GITHUB_ENV
            echo "APP_SERVICE=dev_app" >> $GITHUB_ENV
            echo "DOCKER_TAG=dev" >> $GITHUB_ENV
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        run: |
          docker build -t $DOCKER_HUB_USERNAME/app:${{ env.DOCKER_TAG }} .
          docker push $DOCKER_HUB_USERNAME/app:${{ env.DOCKER_TAG }}

      - name: Verify Docker Hub Push
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        run: |
          MANIFEST=$(docker manifest inspect $DOCKER_HUB_USERNAME/app:${{ env.DOCKER_TAG }})
          if [ $? -eq 0 ]; then
            echo "Image successfully pushed and verified on Docker Hub"
          else
            echo "Failed to verify image on Docker Hub"
            exit 1
          fi

      - name: Deploy to Linode
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
        env:
          LINODE_INSTANCE_IP: ${{ secrets.LINODE_INSTANCE_IP }}
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        run: |
          ssh root@$LINODE_INSTANCE_IP "
            export DOCKER_HUB_USERNAME=$DOCKER_HUB_USERNAME
            export DOCKER_TAG=${{ env.DOCKER_TAG }}
            export APP_SERVICE=${{ env.APP_SERVICE }}
            
            mkdir -p ${{ env.APP_DIR }}
            cd ${{ env.APP_DIR }}

            if [ -d .git ]; then
              git fetch --all
              git checkout ${{ github.ref_name }}
              git reset --hard origin/${{ github.ref_name }}
              git clean -fd
            else
              git clone --branch ${{ github.ref_name }} https://github.com/${{ github.repository }}.git .
            fi

            if [ ! -f .env.${{ env.APP_ENV }} ]; then
              cp .env.${{ env.APP_ENV }}_temp .env.${{ env.APP_ENV }}
            fi

            docker-compose -f ${{ env.COMPOSE_FILE }} pull
            docker-compose -f ${{ env.COMPOSE_FILE }} down --remove-orphans
            docker-compose -f ${{ env.COMPOSE_FILE }} up -d --build $APP_SERVICE mongo redis nginx

            docker system prune -af
          "

      - name: Verify Deployment
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
        env:
          LINODE_INSTANCE_IP: ${{ secrets.LINODE_INSTANCE_IP }}
        run: |
          ssh root@$LINODE_INSTANCE_IP "
            cd ${{ env.APP_DIR }} &&
            docker ps &&
            docker-compose -f ${{ env.COMPOSE_FILE }} logs --tail=50 ${{ env.APP_SERVICE }} nginx
          "